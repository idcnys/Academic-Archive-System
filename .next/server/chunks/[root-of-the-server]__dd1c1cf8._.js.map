{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":["file:///home/bitto/ArchiveModel/lib/drive-config.js"],"sourcesContent":["export const DRIVE_CONFIG = {\n  ROOT_FOLDER_ID: \"/\",\n};\n\nexport const getRootFolderId = () => {\n  return DRIVE_CONFIG.ROOT_FOLDER_ID;\n};\n"],"names":[],"mappings":";;;;AAAO,MAAM,eAAe;IAC1B,gBAAgB;AAClB;AAEO,MAAM,kBAAkB;IAC7B,OAAO,aAAa,cAAc;AACpC","debugId":null}},
    {"offset": {"line": 198, "column": 0}, "map": {"version":3,"sources":["file:///home/bitto/ArchiveModel/app/api/drive/route.js"],"sourcesContent":["import { google } from \"googleapis\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { NextResponse } from \"next/server\";\nimport { getRootFolderId } from \"@/lib/drive-config\";\n\n//\nexport async function POST(req) {\n  try {\n    const KEYFILEPATH = path.join(process.cwd(), \"credentials.json\");\n    const SCOPES = [\"https://www.googleapis.com/auth/drive.readonly\"];\n\n    let auth;\n\n    // Try environment variables first (more reliable for JWT issues)\n    if (process.env.GOOGLE_CLIENT_EMAIL && process.env.GOOGLE_PRIVATE_KEY) {\n      auth = new google.auth.GoogleAuth({\n        credentials: {\n          client_email: process.env.GOOGLE_CLIENT_EMAIL,\n          private_key: process.env.GOOGLE_PRIVATE_KEY.replace(/\\\\n/g, \"\\n\"),\n        },\n        scopes: SCOPES,\n        forceRefreshOnFailure: true,\n      });\n    } else {\n      // Fallback to credentials file\n      if (!fs.existsSync(KEYFILEPATH)) {\n        return NextResponse.json(\n          {\n            error:\n              \"Google Drive credentials not found. Please add credentials.json or set environment variables.\",\n          },\n          { status: 500 }\n        );\n      }\n\n      auth = new google.auth.GoogleAuth({\n        keyFile: KEYFILEPATH,\n        scopes: SCOPES,\n        forceRefreshOnFailure: true,\n      });\n    }\n\n    // Extract folderId from the request body\n    const { folderId } = await req.json();\n\n    if (!folderId) {\n      return NextResponse.json(\n        { error: \"Folder ID is required\" },\n        { status: 400 }\n      );\n    }\n\n    // Get auth client and ensure fresh token\n    const authClient = await auth.getClient();\n\n    const drive = google.drive({ version: \"v3\", auth: authClient });\n\n    // Get current folder info\n    const folderInfo = await drive.files.get({\n      fileId: folderId,\n      fields: \"id, name, parents\",\n    });\n\n    // Get files in the current folder\n    const response = await drive.files.list({\n      q: `'${folderId}' in parents and trashed = false`,\n      fields: \"files(id, name, mimeType, webViewLink, webContentLink)\",\n    });\n\n    return NextResponse.json({\n      files: response.data.files,\n      currentFolder: {\n        id: folderInfo.data.id,\n        name: folderInfo.data.name,\n      },\n    });\n  } catch (err) {\n    console.error(\"Google Drive API Error:\", err);\n\n    let errorMessage = \"Failed to fetch files from Google Drive\";\n\n    if (err.code === \"ENOENT\") {\n      errorMessage = \"Google Drive credentials file not found\";\n    } else if (err.code === 403) {\n      errorMessage = \"Access denied. Check your Google Drive API permissions.\";\n    } else if (err.code === 404) {\n      errorMessage = \"Folder not found or not accessible.\";\n    } else if (err.message && err.message.includes(\"invalid_grant\")) {\n      errorMessage =\n        \"Authentication failed. Please check your service account credentials and system time.\";\n    } else if (err.message && err.message.includes(\"JWT\")) {\n      errorMessage =\n        \"JWT token error. Please regenerate your service account credentials.\";\n    } else if (err.message) {\n      errorMessage = err.message;\n    }\n\n    return NextResponse.json({ error: errorMessage }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAGO,eAAe,KAAK,GAAG;IAC5B,IAAI;QACF,MAAM,cAAc,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;QAC7C,MAAM,SAAS;YAAC;SAAiD;QAEjE,IAAI;QAEJ,iEAAiE;QACjE,IAAI,QAAQ,GAAG,CAAC,mBAAmB,IAAI,QAAQ,GAAG,CAAC,kBAAkB,EAAE;YACrE,OAAO,IAAI,qJAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;gBAChC,aAAa;oBACX,cAAc,QAAQ,GAAG,CAAC,mBAAmB;oBAC7C,aAAa,QAAQ,GAAG,CAAC,kBAAkB,CAAC,OAAO,CAAC,QAAQ;gBAC9D;gBACA,QAAQ;gBACR,uBAAuB;YACzB;QACF,OAAO;YACL,+BAA+B;YAC/B,IAAI,CAAC,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC,cAAc;gBAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;oBACE,OACE;gBACJ,GACA;oBAAE,QAAQ;gBAAI;YAElB;YAEA,OAAO,IAAI,qJAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;gBAChC,SAAS;gBACT,QAAQ;gBACR,uBAAuB;YACzB;QACF;QAEA,yCAAyC;QACzC,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAEnC,IAAI,CAAC,UAAU;YACb,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAwB,GACjC;gBAAE,QAAQ;YAAI;QAElB;QAEA,yCAAyC;QACzC,MAAM,aAAa,MAAM,KAAK,SAAS;QAEvC,MAAM,QAAQ,qJAAA,CAAA,SAAM,CAAC,KAAK,CAAC;YAAE,SAAS;YAAM,MAAM;QAAW;QAE7D,0BAA0B;QAC1B,MAAM,aAAa,MAAM,MAAM,KAAK,CAAC,GAAG,CAAC;YACvC,QAAQ;YACR,QAAQ;QACV;QAEA,kCAAkC;QAClC,MAAM,WAAW,MAAM,MAAM,KAAK,CAAC,IAAI,CAAC;YACtC,GAAG,CAAC,CAAC,EAAE,SAAS,gCAAgC,CAAC;YACjD,QAAQ;QACV;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,OAAO,SAAS,IAAI,CAAC,KAAK;YAC1B,eAAe;gBACb,IAAI,WAAW,IAAI,CAAC,EAAE;gBACtB,MAAM,WAAW,IAAI,CAAC,IAAI;YAC5B;QACF;IACF,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,2BAA2B;QAEzC,IAAI,eAAe;QAEnB,IAAI,IAAI,IAAI,KAAK,UAAU;YACzB,eAAe;QACjB,OAAO,IAAI,IAAI,IAAI,KAAK,KAAK;YAC3B,eAAe;QACjB,OAAO,IAAI,IAAI,IAAI,KAAK,KAAK;YAC3B,eAAe;QACjB,OAAO,IAAI,IAAI,OAAO,IAAI,IAAI,OAAO,CAAC,QAAQ,CAAC,kBAAkB;YAC/D,eACE;QACJ,OAAO,IAAI,IAAI,OAAO,IAAI,IAAI,OAAO,CAAC,QAAQ,CAAC,QAAQ;YACrD,eACE;QACJ,OAAO,IAAI,IAAI,OAAO,EAAE;YACtB,eAAe,IAAI,OAAO;QAC5B;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAa,GAAG;YAAE,QAAQ;QAAI;IAClE;AACF","debugId":null}}]
}